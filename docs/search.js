window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src.SPEED", "modulename": "src.SPEED", "kind": "module", "doc": "<p>SPED</p>\n"}, {"fullname": "src.SPEED.distributed_service_manager", "modulename": "src.SPEED.distributed_service_manager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.SPEED.distributed_service_manager.DistributedServiceManager", "modulename": "src.SPEED.distributed_service_manager", "qualname": "DistributedServiceManager", "kind": "class", "doc": "<p>The Service Manager (SM) has the following responsibilities:</p>\n\n<ul>\n<li>Receive the SFC Request when its zone is the selected zone to coordinate the placement process.</li>\n<li>Receive the VNFs that should be placed.</li>\n<li>Create the VNF Segments.</li>\n<li>Select the child zones that should execute each Segment.</li>\n<li>After all VNF Segments finish the placed, this zone will terminate the process.</li>\n</ul>\n\n<p>Each zone have one SM that will deal with the services requested.</p>\n"}, {"fullname": "src.SPEED.distributed_service_manager.DistributedServiceManager.__init__", "modulename": "src.SPEED.distributed_service_manager", "qualname": "DistributedServiceManager.__init__", "kind": "function", "doc": "<p>Create a new Slice Auction Manager.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>environment</strong>:  The simulation environment.</li>\n<li><strong>zone</strong>:  The zone where the service manager is associated.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">zone</span><span class=\"p\">:</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">Zone</span>, </span><span class=\"param\"><span class=\"n\">environment</span></span>)</span>"}, {"fullname": "src.SPEED.distributed_service_manager.DistributedServiceManager.environment", "modulename": "src.SPEED.distributed_service_manager", "qualname": "DistributedServiceManager.environment", "kind": "variable", "doc": "<p>The environment simulation.</p>\n"}, {"fullname": "src.SPEED.distributed_service_manager.DistributedServiceManager.zone", "modulename": "src.SPEED.distributed_service_manager", "qualname": "DistributedServiceManager.zone", "kind": "variable", "doc": "<p>The zone which the auction manager is responsible.</p>\n", "annotation": ": SPEED.entities.zone.Zone"}, {"fullname": "src.SPEED.distributed_service_manager.DistributedServiceManager.node", "modulename": "src.SPEED.distributed_service_manager", "qualname": "DistributedServiceManager.node", "kind": "variable", "doc": "<p>Select one node from an above zone to be the node where the distributed service manager is executed\nWill be used during the simulation to find the delay until de child zones components.</p>\n"}, {"fullname": "src.SPEED.distributed_service_manager.DistributedServiceManager.sfc_requests", "modulename": "src.SPEED.distributed_service_manager", "qualname": "DistributedServiceManager.sfc_requests", "kind": "variable", "doc": "<p>All the SFC Request which the zone is the manager.</p>\n", "annotation": ": Dict[str, SimPlacement.entities.sfc_request.SFCRequest]"}, {"fullname": "src.SPEED.distributed_service_manager.DistributedServiceManager.distributed_services", "modulename": "src.SPEED.distributed_service_manager", "qualname": "DistributedServiceManager.distributed_services", "kind": "variable", "doc": "<p>All the SFC Request which the zone is the manager.</p>\n", "annotation": ": Dict[str, SPEED.entities.distributed_service.DistributedService]"}, {"fullname": "src.SPEED.distributed_service_manager.DistributedServiceManager.add_sfc_request", "modulename": "src.SPEED.distributed_service_manager", "qualname": "DistributedServiceManager.add_sfc_request", "kind": "function", "doc": "<p>Add a new SFC Request that the zone will manager the distributed SFC Placement process.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sfc_request</strong>:  The SFC Request Object.</li>\n<li><strong>placement_timeout</strong>:  The max delay for the placement timeout.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>SFCRequest</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sfc_request</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">sfc_request</span><span class=\"o\">.</span><span class=\"n\">SFCRequest</span>,</span><span class=\"param\">\t<span class=\"n\">placement_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">sfc_request</span><span class=\"o\">.</span><span class=\"n\">SFCRequest</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.distributed_service_manager.DistributedServiceManager.add_segment_to_compute_zone", "modulename": "src.SPEED.distributed_service_manager", "qualname": "DistributedServiceManager.add_segment_to_compute_zone", "kind": "function", "doc": "<p>The zone that will execute some VNF send this info to the zone manager of the requested service.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sfc_request</strong>:  The SFC Request.</li>\n<li><strong>vnf_names</strong>:  The list of the VNFs that will be execute in the zone.</li>\n<li><strong>zone</strong>:  The compute zone.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sfc_request</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">sfc_request</span><span class=\"o\">.</span><span class=\"n\">SFCRequest</span>,</span><span class=\"param\">\t<span class=\"n\">vnf_names</span><span class=\"p\">:</span> <span class=\"n\">List</span>,</span><span class=\"param\">\t<span class=\"n\">zone</span><span class=\"p\">:</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">Zone</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.distributed_service_manager.DistributedServiceManager.select_zones_to_vnf_segments", "modulename": "src.SPEED.distributed_service_manager", "qualname": "DistributedServiceManager.select_zones_to_vnf_segments", "kind": "function", "doc": "<p>Select for each VNF Segment in the segmentation plan the zone that will execute the VNF Segment.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>segmentation_plan</strong>:  The segmentation plan that will be processed in the zone</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">segmentation_plan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.entities", "modulename": "src.SPEED.entities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.SPEED.entities.distributed_service", "modulename": "src.SPEED.entities.distributed_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.SPEED.entities.distributed_service.DistributedService", "modulename": "src.SPEED.entities.distributed_service", "qualname": "DistributedService", "kind": "class", "doc": "<p>The Distributed Service Entity.</p>\n\n<p>Each SFC Request after placed will generate a Distributed Service.</p>\n", "bases": "SimPlacement.entity.Entity"}, {"fullname": "src.SPEED.entities.distributed_service.DistributedService.__init__", "modulename": "src.SPEED.entities.distributed_service", "qualname": "DistributedService.__init__", "kind": "function", "doc": "<p>Create a Distributed Service.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sfc_request</strong>:  The SFC Request object.</li>\n<li><strong>manager_zone</strong>:  The zone that manages the distributed service.</li>\n<li><strong>extra_parameters</strong>:  Dict with extra parameters.</li>\n<li><strong>placement_timeout</strong>:  For how long the DS waits to receive the message about the compute zone selection.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sfc_request</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">sfc_request</span><span class=\"o\">.</span><span class=\"n\">SFCRequest</span>,</span><span class=\"param\">\t<span class=\"n\">manager_zone</span><span class=\"p\">:</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">Zone</span>,</span><span class=\"param\">\t<span class=\"n\">placement_timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">extra_parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.SPEED.entities.distributed_service.DistributedService.dec_placement_timeout", "modulename": "src.SPEED.entities.distributed_service", "qualname": "DistributedService.dec_placement_timeout", "kind": "function", "doc": "<p>Decrement the placement timeout for a service.</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.entities.distributed_service.DistributedService.add_vnf_to_zone", "modulename": "src.SPEED.entities.distributed_service", "qualname": "DistributedService.add_vnf_to_zone", "kind": "function", "doc": "<p>Add the vnf to the compute zone.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>vnf_name</strong>:  The name of the VNF.</li>\n<li><strong>zone_name</strong>:  The name of the Zone.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vnf_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">zone_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.entities.distributed_service.DistributedService.check_vnfs_assigned_to_compute_zone", "modulename": "src.SPEED.entities.distributed_service", "qualname": "DistributedService.check_vnfs_assigned_to_compute_zone", "kind": "function", "doc": "<p>If all the VNFs of the SFC Request was assigned to one compute zone return True</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if all the VNFs were placed, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.entities.vnf_segment", "modulename": "src.SPEED.entities.vnf_segment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.SPEED.entities.vnf_segment.VNFSegment", "modulename": "src.SPEED.entities.vnf_segment", "qualname": "VNFSegment", "kind": "class", "doc": "<p>This class represent the abstraction of a VNF Segment.</p>\n\n<p>One VNF Segment encompasses one or more VNFs. All the VNFs inside a VNF Segment will be placed in the same Zone.</p>\n", "bases": "SimPlacement.entity.Entity"}, {"fullname": "src.SPEED.entities.vnf_segment.VNFSegment.__init__", "modulename": "src.SPEED.entities.vnf_segment", "qualname": "VNFSegment.__init__", "kind": "function", "doc": "<p>Create a VNF Segment.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The name of the VNF.</li>\n<li><strong>vnfs</strong>:  The list of VNFs encompassed by the VNF Segment.</li>\n<li><strong>max_delay</strong>:  The delay tolerable by the SFC.</li>\n<li><strong>extra_parameters</strong>:  Dict with extra parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">vnfs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">vnf</span><span class=\"o\">.</span><span class=\"n\">VNF</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">max_delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">extra_parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.SPEED.entities.vnf_segment.VNFSegment.vnfs", "modulename": "src.SPEED.entities.vnf_segment", "qualname": "VNFSegment.vnfs", "kind": "variable", "doc": "<p>Define the list of VNFs that compose the VNF Segment.</p>\n"}, {"fullname": "src.SPEED.entities.vnf_segment.VNFSegment.max_delay", "modulename": "src.SPEED.entities.vnf_segment", "qualname": "VNFSegment.max_delay", "kind": "variable", "doc": "<p>Set the max_delay.</p>\n"}, {"fullname": "src.SPEED.entities.vnf_segment.VNFSegment.domain", "modulename": "src.SPEED.entities.vnf_segment", "qualname": "VNFSegment.domain", "kind": "variable", "doc": "<p>Set the domain name.</p>\n"}, {"fullname": "src.SPEED.entities.zone", "modulename": "src.SPEED.entities.zone", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.SPEED.entities.zone.Zone", "modulename": "src.SPEED.entities.zone", "qualname": "Zone", "kind": "class", "doc": "<p>This class represent the abstraction of a zone.</p>\n", "bases": "SimPlacement.entity.Entity"}, {"fullname": "src.SPEED.entities.zone.Zone.__init__", "modulename": "src.SPEED.entities.zone", "qualname": "Zone.__init__", "kind": "function", "doc": "<p>Create a Zone.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The name of the Zone.</li>\n<li><strong>zone_type</strong>:  The zone_type.</li>\n<li><strong>domain_name</strong>:  The name of the domain.</li>\n<li><strong>child_zone_names</strong>:  The list of child zones name.</li>\n<li><strong>parent_zone_name</strong>:  The name of the parent zone.</li>\n<li><strong>extra_parameters</strong>:  Dict with extra parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">zone_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">child_zone_names</span><span class=\"o\">=</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">parent_zone_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">domain_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extra_parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.SPEED.entities.zone.Zone.TYPE_COMPUTE", "modulename": "src.SPEED.entities.zone", "qualname": "Zone.TYPE_COMPUTE", "kind": "variable", "doc": "<p>Constant used to define zones that provides computational resources for VNF Instances execution.</p>\n", "default_value": " = &#x27;compute&#x27;"}, {"fullname": "src.SPEED.entities.zone.Zone.TYPE_AGGREGATION", "modulename": "src.SPEED.entities.zone", "qualname": "Zone.TYPE_AGGREGATION", "kind": "variable", "doc": "<p>Constant used to define zones that aggregate other zones data informations.</p>\n", "default_value": " = &#x27;aggregation&#x27;"}, {"fullname": "src.SPEED.entities.zone.Zone.TYPE_ACCESS", "modulename": "src.SPEED.entities.zone", "qualname": "Zone.TYPE_ACCESS", "kind": "variable", "doc": "<p>Constant used to define nodes where the user is connected.</p>\n", "default_value": " = &#x27;access&#x27;"}, {"fullname": "src.SPEED.entities.zone.Zone.VALID_TYPES", "modulename": "src.SPEED.entities.zone", "qualname": "Zone.VALID_TYPES", "kind": "variable", "doc": "<p>Constant used to define zone valid types.</p>\n", "default_value": " = [&#x27;compute&#x27;, &#x27;aggregation&#x27;, &#x27;access&#x27;]"}, {"fullname": "src.SPEED.entities.zone.Zone.zone_type", "modulename": "src.SPEED.entities.zone", "qualname": "Zone.zone_type", "kind": "variable", "doc": "<p>Set the zone type.</p>\n"}, {"fullname": "src.SPEED.entities.zone.Zone.child_zone_names", "modulename": "src.SPEED.entities.zone", "qualname": "Zone.child_zone_names", "kind": "variable", "doc": "<p>Define the name of child zones.</p>\n"}, {"fullname": "src.SPEED.entities.zone.Zone.parent_zone_name", "modulename": "src.SPEED.entities.zone", "qualname": "Zone.parent_zone_name", "kind": "variable", "doc": "<p>Set the entity parent zone name.</p>\n"}, {"fullname": "src.SPEED.entities.zone.Zone.domain_name", "modulename": "src.SPEED.entities.zone", "qualname": "Zone.domain_name", "kind": "variable", "doc": "<p>Set the domain name.</p>\n"}, {"fullname": "src.SPEED.entities.zone.Zone.add_child_zone_name", "modulename": "src.SPEED.entities.zone", "qualname": "Zone.add_child_zone_name", "kind": "function", "doc": "<p>Add a child zone name to the zone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.logs", "modulename": "src.SPEED.logs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.SPEED.logs.distributed_service", "modulename": "src.SPEED.logs.distributed_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog", "kind": "class", "doc": "<p>This class manages the Segments logs.</p>\n", "bases": "SimPlacement.logs.log.Log"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog.__init__", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog.__init__", "kind": "function", "doc": "<p>Distributed Service logs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog.COLUMNS", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog.COLUMNS", "kind": "variable", "doc": "<p>The column title of the CSV file.</p>\n", "default_value": " = [&#x27;Event&#x27;, &#x27;Time&#x27;, &#x27;SFC_Request_Name&#x27;, &#x27;Zone_Manager&#x27;]"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog.FILE_NAME", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog.FILE_NAME", "kind": "variable", "doc": "<p>Name of the CSV file.</p>\n", "default_value": " = &#x27;distributed_service.csv&#x27;"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog.CREATED", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog.CREATED", "kind": "variable", "doc": "<p>Caused when the distributed service is created.</p>\n", "default_value": " = &#x27;CREATED&#x27;"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog.FAIL", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog.FAIL", "kind": "variable", "doc": "<p>Caused when the distributed service fails during the distributed placement process.</p>\n", "default_value": " = &#x27;FAIL&#x27;"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog.PLACED", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog.PLACED", "kind": "variable", "doc": "<p>Caused when all the VNFs were placed.</p>\n", "default_value": " = &#x27;PLACED&#x27;"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog.VNFs_ASSIGNED_TO_COMPUTE_ZONE", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog.VNFs_ASSIGNED_TO_COMPUTE_ZONE", "kind": "variable", "doc": "<p>Caused when all the VNFs were assigned to a compute zone.</p>\n", "default_value": " = &#x27;VNFs_ASSIGNED_TO_COMPUTE_ZONE&#x27;"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog.TIMEOUT", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog.TIMEOUT", "kind": "variable", "doc": "<p>Caused when all the distributed placements takes too long.</p>\n", "default_value": " = &#x27;TIMEOUT&#x27;"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog.ZONE_MANAGER_SELECTED", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog.ZONE_MANAGER_SELECTED", "kind": "variable", "doc": "<p>Caused when the ZONE MANAGER TO A requested services is selected.</p>\n", "default_value": " = &#x27;ZONE_MANAGER_SELECTED&#x27;"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog.add_event", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog.add_event", "kind": "function", "doc": "<p>Add a new event.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>event</strong>:  The name of the event.</li>\n<li><strong>time</strong>:  Time of the event.</li>\n<li><strong>sfc_request_name</strong>:  The name of the SFC Requested.</li>\n<li><strong>zone_manager_name</strong>:  The name of the Zone.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">sfc_request_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">zone_manager_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.logs.distributed_service.DistributedServiceLog.save", "modulename": "src.SPEED.logs.distributed_service", "qualname": "DistributedServiceLog.save", "kind": "function", "doc": "<p>Save the events.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_path</strong>:  The path where the log file will be created.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;.&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.logs.vnf_segment", "modulename": "src.SPEED.logs.vnf_segment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.SPEED.logs.vnf_segment.VNFSegmentLog", "modulename": "src.SPEED.logs.vnf_segment", "qualname": "VNFSegmentLog", "kind": "class", "doc": "<p>This class manages the Segments logs.</p>\n", "bases": "SimPlacement.logs.log.Log"}, {"fullname": "src.SPEED.logs.vnf_segment.VNFSegmentLog.__init__", "modulename": "src.SPEED.logs.vnf_segment", "qualname": "VNFSegmentLog.__init__", "kind": "function", "doc": "<p>Segment logs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.SPEED.logs.vnf_segment.VNFSegmentLog.COLUMNS", "modulename": "src.SPEED.logs.vnf_segment", "qualname": "VNFSegmentLog.COLUMNS", "kind": "variable", "doc": "<p>The column title of the CSV file.</p>\n", "default_value": " = [&#x27;Event&#x27;, &#x27;Time&#x27;, &#x27;SFC_Request_Name&#x27;, &#x27;Zone&#x27;, &#x27;VNFs&#x27;]"}, {"fullname": "src.SPEED.logs.vnf_segment.VNFSegmentLog.FILE_NAME", "modulename": "src.SPEED.logs.vnf_segment", "qualname": "VNFSegmentLog.FILE_NAME", "kind": "variable", "doc": "<p>Name of the CSV file.</p>\n", "default_value": " = &#x27;segment.csv&#x27;"}, {"fullname": "src.SPEED.logs.vnf_segment.VNFSegmentLog.CREATED", "modulename": "src.SPEED.logs.vnf_segment", "qualname": "VNFSegmentLog.CREATED", "kind": "variable", "doc": "<p>Caused when the segment is created.</p>\n", "default_value": " = &#x27;CREATED&#x27;"}, {"fullname": "src.SPEED.logs.vnf_segment.VNFSegmentLog.TIMEOUT", "modulename": "src.SPEED.logs.vnf_segment", "qualname": "VNFSegmentLog.TIMEOUT", "kind": "variable", "doc": "<p>Caused when the zone manager already enter in timeout for the SFC Request.</p>\n", "default_value": " = &#x27;TIMEOUT&#x27;"}, {"fullname": "src.SPEED.logs.vnf_segment.VNFSegmentLog.COMPUTE_ZONE_SELECTED", "modulename": "src.SPEED.logs.vnf_segment", "qualname": "VNFSegmentLog.COMPUTE_ZONE_SELECTED", "kind": "variable", "doc": "<p>Caused when the compute zone is selected.</p>\n", "default_value": " = &#x27;COMPUTE_ZONE_SELECTED&#x27;"}, {"fullname": "src.SPEED.logs.vnf_segment.VNFSegmentLog.AGGREGATION_ZONE_SELECTED", "modulename": "src.SPEED.logs.vnf_segment", "qualname": "VNFSegmentLog.AGGREGATION_ZONE_SELECTED", "kind": "variable", "doc": "<p>Caused when the aggregation zone is selected.</p>\n", "default_value": " = &#x27;AGGREGATION_ZONE_SELECTED&#x27;"}, {"fullname": "src.SPEED.logs.vnf_segment.VNFSegmentLog.add_event", "modulename": "src.SPEED.logs.vnf_segment", "qualname": "VNFSegmentLog.add_event", "kind": "function", "doc": "<p>Add a new event.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>event</strong>:  The name of the event.</li>\n<li><strong>time</strong>:  Time of the event.</li>\n<li><strong>sfc_request_name</strong>:  The name of the SFC Requested.</li>\n<li><strong>zone_name</strong>:  The name of the Zone.</li>\n<li><strong>vnf_names</strong>:  The list with the VNFs.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">sfc_request_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">zone_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">vnf_names</span><span class=\"p\">:</span> <span class=\"n\">List</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.logs.vnf_segment.VNFSegmentLog.save", "modulename": "src.SPEED.logs.vnf_segment", "qualname": "VNFSegmentLog.save", "kind": "function", "doc": "<p>Save the events.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_path</strong>:  The path where the log file will be created.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;.&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation", "modulename": "src.SPEED.simulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation", "kind": "class", "doc": "<p>The simulation using the SPEED Strategy to execute the distributed SFC Placement.</p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.__init__", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.__init__", "kind": "function", "doc": "<p>The simulation component.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env</strong>:  SimPy environment.</li>\n<li><strong>config</strong>:  Simulation configuration parameters.</li>\n<li><strong>environment</strong>:  simulation environment.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">simpy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Environment</span>, </span><span class=\"param\"><span class=\"n\">config</span>, </span><span class=\"param\"><span class=\"n\">environment</span></span>)</span>"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.env", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.env", "kind": "variable", "doc": "<p>The SimPy environment object.</p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.environment", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.environment", "kind": "variable", "doc": "<p>Dict with all the entities of the simulation.</p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.config", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.config", "kind": "variable", "doc": "<p>Simulation config.</p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.duration", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.duration", "kind": "variable", "doc": "<p>The duration of the simulation.</p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.vnf_instance_initial_status", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.vnf_instance_initial_status", "kind": "variable", "doc": "<p>Defines the VNF Instance status after its creation.</p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.vnf_instance_ru_status", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.vnf_instance_ru_status", "kind": "variable", "doc": "<p>List with the VNF Instance status that the resource used should be counted as reserved in the node.</p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.sfc_requests", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.sfc_requests", "kind": "variable", "doc": "<p>Aux var with all the SFC Requests.</p>\n", "annotation": ": Dict[str, SimPlacement.entities.sfc_request.SFCRequest]"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.domains", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.domains", "kind": "variable", "doc": "<p>Aux var with all the Domains.</p>\n", "annotation": ": Dict[str, SimPlacement.entities.domain.Domain]"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.zones", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.zones", "kind": "variable", "doc": "<p>Aux var with all the Zones.</p>\n", "annotation": ": Dict[str, SPEED.entities.zone.Zone]"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.packets", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.packets", "kind": "variable", "doc": "<p>Aux var with all the packets.</p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.log", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.log", "kind": "variable", "doc": "<p>The log object store all the entities logs.</p>\n", "annotation": ": SimPlacement.log.SimLog"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.packet_log", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.packet_log", "kind": "variable", "doc": "<p>The object for logging the packet events.</p>\n", "annotation": ": SimPlacement.logs.packet.PacketLog"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.placement_log", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.placement_log", "kind": "variable", "doc": "<p>The object for logging the placement events.</p>\n", "annotation": ": SimPlacement.logs.placement.PlacementLog"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.vnf_instance_log", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.vnf_instance_log", "kind": "variable", "doc": "<p>The object for logging the VNF Instance events.</p>\n", "annotation": ": SimPlacement.logs.vnf_instance.VNFInstanceLog"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.virtual_link_log", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.virtual_link_log", "kind": "variable", "doc": "<p>The object for logging the virtual link events.</p>\n", "annotation": ": SimPlacement.logs.virtual_link.VirtualLinkLog"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.sfc_instance_log", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.sfc_instance_log", "kind": "variable", "doc": "<p>The object for logging the SFC Instance events.</p>\n", "annotation": ": SimPlacement.logs.sfc_instance.SFCInstanceLog"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.simpy_resource_vnf_instances", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.simpy_resource_vnf_instances", "kind": "variable", "doc": "<p>Dict with the SimPy resources of the VNF Instances. Each VNF Instance will have one SimPy resource.</p>\n", "annotation": ": Dict[str, simpy.resources.resource.Resource]"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.simpy_resource_virtual_links", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.simpy_resource_virtual_links", "kind": "variable", "doc": "<p>Dict with the SimPy resources of the Virtual Links. Each Virtual Link will have one SimPy resource.</p>\n", "annotation": ": Dict[str, simpy.resources.resource.Resource]"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.packet_in_execution", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.packet_in_execution", "kind": "variable", "doc": "<p>All the packet that are in execution inside the simulation. The key is the name of the domain where the packet\nwere created.</p>\n", "annotation": ": Dict[str, List[SimPlacement.entities.packet.Packet]]"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.packet_delay_violated", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.packet_delay_violated", "kind": "variable", "doc": "<p>All the packet that violated the max delay.</p>\n", "annotation": ": Dict[str, List[SimPlacement.entities.packet.Packet]]"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.sdn_controller", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.sdn_controller", "kind": "variable", "doc": "<p>Global SDN Controller that know all the Links and Nodes, only for the packet process. The placement componentes\nuses a SDN Controller only with the resources of the domain.</p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.domain_zone", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.domain_zone", "kind": "variable", "doc": "<p>Dictionary with the zone associated with the domain</p>\n", "annotation": ": Dict[str, str]"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.zdsm", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.zdsm", "kind": "variable", "doc": "<p>Dictionary with the zone associated with each distributed service</p>\n", "annotation": ": Dict[str, SPEED.distributed_service_manager.DistributedServiceManager]"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.sfc_request_zone_manager", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.sfc_request_zone_manager", "kind": "variable", "doc": "<p>Dictionary with the zone associated with each sfc requested</p>\n", "annotation": ": Dict[str, SPEED.entities.zone.Zone]"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.graph_zones", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.graph_zones", "kind": "variable", "doc": "<p>Topology of the zones in a networkx Graph</p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.default_placement_timeout", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.default_placement_timeout", "kind": "variable", "doc": "<p>The default value for the distributed service wait until set the placement as a fail.</p>\n"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.setup", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.setup", "kind": "function", "doc": "<p>Configure the components to execute the distributed simulation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.run", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.run", "kind": "function", "doc": "<p>Execute the SimPy simulation process.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.simulate", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.simulate", "kind": "function", "doc": "<p>Execute the simulation main process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.distributed_sfc_placement_process", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.distributed_sfc_placement_process", "kind": "function", "doc": "<p>Execute the game in each zone.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sfc_request</strong>:  The service requested</li>\n<li><strong>zone</strong>:  The zone where the game is executed</li>\n<li><strong>vnf_names</strong>:  The name of the VNFs.</li>\n<li><strong>timeout</strong>:  The delay between the distributed service component in the parent until the child\nzone component.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sfc_request</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">sfc_request</span><span class=\"o\">.</span><span class=\"n\">SFCRequest</span>,</span><span class=\"param\">\t<span class=\"n\">zone</span><span class=\"p\">:</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">Zone</span>,</span><span class=\"param\">\t<span class=\"n\">vnf_names</span><span class=\"p\">:</span> <span class=\"n\">List</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.delay_between_distributed_service_components", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.delay_between_distributed_service_components", "kind": "function", "doc": "<p>Return the delay between the distributed service components in two zones.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>zone_1</strong>:  The first zone.</li>\n<li><strong>zone_2</strong>:  The second zone.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">zone_1</span><span class=\"p\">:</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">Zone</span>,</span><span class=\"param\">\t<span class=\"n\">zone_2</span><span class=\"p\">:</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">Zone</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.update_aggregated_data", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.update_aggregated_data", "kind": "function", "doc": "<p>Update the aggregated data in all the zones. First the child zones will send the data to\nparent zone recursively.</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.update_zone_aggregated_data", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.update_zone_aggregated_data", "kind": "function", "doc": "<p>Update the aggregated data for a zone.</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">zone</span><span class=\"p\">:</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">Zone</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.select_zone_manager", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.select_zone_manager", "kind": "function", "doc": "<p>Select the zone that manage the distributed placement process.</p>\n\n<p>The src and dst must be in one of the underlying zones.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sfc_request</strong>:  The SFC Request</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sfc_request</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">sfc_request</span><span class=\"o\">.</span><span class=\"n\">SFCRequest</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.find_valid_vnf_segment_plan", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.find_valid_vnf_segment_plan", "kind": "function", "doc": "<p>Select the valid VNF Segments based on the zone where the game will be playerd.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>zone</strong>:  The zone that will play the game.</li>\n<li><strong>vnf_names</strong>:  The list with the name of VNFs.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">zone</span><span class=\"p\">:</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">Zone</span>, </span><span class=\"param\"><span class=\"n\">vnf_names</span><span class=\"p\">:</span> <span class=\"n\">List</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.execute_placement_plan", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.execute_placement_plan", "kind": "function", "doc": "<p>Execute the SFC Placement plan. Create the SFC Instance, VNF Instances and Virtual Links.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>domain</strong>:  The domain object.</li>\n<li><strong>plan</strong>:  The SFC Placement plan.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">Domain</span>,</span><span class=\"param\">\t<span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">SFCPlacementPlan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.workload_process", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.workload_process", "kind": "function", "doc": "<p>Start processing the packets (workload) of the SFC Request.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>distributed_service</strong>:  The distributed service.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">distributed_service</span><span class=\"p\">:</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">distributed_service</span><span class=\"o\">.</span><span class=\"n\">DistributedService</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.process_packet", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.process_packet", "kind": "function", "doc": "<p>Process the packets over the ingress link, VNF Instances and Virtual Links.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>packet</strong>:  The packet object.</li>\n<li><strong>distributed_service</strong>:  The Distributed Service.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">packet</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span>,</span><span class=\"param\">\t<span class=\"n\">distributed_service</span><span class=\"p\">:</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">distributed_service</span><span class=\"o\">.</span><span class=\"n\">DistributedService</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.process_packet_over_vnf_instance", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.process_packet_over_vnf_instance", "kind": "function", "doc": "<p>Process the packet over the VNF Instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>packet</strong>:  The packet object.</li>\n<li><strong>vnf_instance</strong>:  The VNF Instance object.</li>\n<li><strong>domain</strong>:  The domain object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">packet</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span>,</span><span class=\"param\">\t<span class=\"n\">vnf_instance</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">vnf_instance</span><span class=\"o\">.</span><span class=\"n\">VNFInstance</span>,</span><span class=\"param\">\t<span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">Domain</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.process_packet_over_link", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.process_packet_over_link", "kind": "function", "doc": "<p>Process the packet over the Virtual link.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>packet</strong>:  The packet object.</li>\n<li><strong>virtual_link</strong>:  The virtual link object.</li>\n<li><strong>domain</strong>:  The domain object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">packet</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span>,</span><span class=\"param\">\t<span class=\"n\">virtual_link</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">virtual_link</span><span class=\"o\">.</span><span class=\"n\">VirtualLink</span>,</span><span class=\"param\">\t<span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">Domain</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.inc_packet_delay", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.inc_packet_delay", "kind": "function", "doc": "<p>Increase the delay of all the packets in the simulation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">Domain</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.dec_sfc_instances_timeout", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.dec_sfc_instances_timeout", "kind": "function", "doc": "<p>For all the active SFC Instances, decrease the timeout.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>domain</strong>:  The domain object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">Domain</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.del_sfc_instance", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.del_sfc_instance", "kind": "function", "doc": "<p>Destroy the SFC Instance</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>domain</strong>: </li>\n<li><strong>sfc_instance</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">Domain</span>,</span><span class=\"param\">\t<span class=\"n\">sfc_instance</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">sfc_instance</span><span class=\"o\">.</span><span class=\"n\">SFCInstance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.del_vnf_instances_not_used", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.del_vnf_instances_not_used", "kind": "function", "doc": "<p>Remove all the VNF Instances in the environment that is not associated with any SFC Instance</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.sfc_requests_vnfs_are_assigned_to_compute_zone", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.sfc_requests_vnfs_are_assigned_to_compute_zone", "kind": "function", "doc": "<p>Iterate over the SFC Requested and verify if is was placed or not.</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.simulation.SPEEDSimulation.shutdown", "modulename": "src.SPEED.simulation", "qualname": "SPEEDSimulation.shutdown", "kind": "function", "doc": "<p>Execute after the simulation finished.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.speed", "modulename": "src.SPEED.speed", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.SPEED.speed.SPEED", "modulename": "src.SPEED.speed", "qualname": "SPEED", "kind": "class", "doc": "<p>This class represent the SPED component.</p>\n", "bases": "SimPlacement.entity.Entity"}, {"fullname": "src.SPEED.speed.SPEED.__init__", "modulename": "src.SPEED.speed", "qualname": "SPEED.__init__", "kind": "function", "doc": "<p>Create the SPED component.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The name of the SPED component.</li>\n<li><strong>zone_name</strong>:  The name of the zone where the SPED is connected.</li>\n<li><strong>domain</strong>:  The domain where the SPED is executed.</li>\n<li><strong>environment</strong>:  The environment, its an auxiliar info about the environment where the zone is executed.</li>\n<li><strong>extra_parameters</strong>:  Dict with extra parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">zone_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">Domain</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extra_parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.SPEED.speed.SPEED.domain", "modulename": "src.SPEED.speed", "qualname": "SPEED.domain", "kind": "variable", "doc": "<p>Set the domain name.</p>\n"}, {"fullname": "src.SPEED.speed.SPEED.zone_name", "modulename": "src.SPEED.speed", "qualname": "SPEED.zone_name", "kind": "variable", "doc": "<p>Set the zone name.</p>\n"}, {"fullname": "src.SPEED.speed.SPEED.compute_zone_data_collect", "modulename": "src.SPEED.speed", "qualname": "SPEED.compute_zone_data_collect", "kind": "function", "doc": "<p>Collect network and compute data about all the nodes in the zone domain:</p>\n\n<ul>\n<li>Delay from each node to all the GWs.</li>\n<li>The VNFs that can be executed in each node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List with the data of the infrastructure</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">InfrastructureData</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.speed.SPEED.aggregate_infrastructure_data", "modulename": "src.SPEED.speed", "qualname": "SPEED.aggregate_infrastructure_data", "kind": "function", "doc": "<p>Aggregate infrastructure data.</p>\n\n<p>Define the min cost to execute each VNFs to the WGW</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">AggregatedData</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.speed.SPEED.update_child_zone_aggregated_data", "modulename": "src.SPEED.speed", "qualname": "SPEED.update_child_zone_aggregated_data", "kind": "function", "doc": "<p>Add the aggregated data about a child zone in the parent zone.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>zone_name</strong>:  The name of the child zone that send the data.</li>\n<li><strong>child_zone_aggregated_data</strong>:  The aggregated data in the child zone.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">zone_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">child_zone_aggregated_data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">SPEED</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">AggregatedData</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.speed.SPEED.aggregate_date", "modulename": "src.SPEED.speed", "qualname": "SPEED.aggregate_date", "kind": "function", "doc": "<p>Process the local aggregated data, and the child received aggregated data and return to the parent zone.</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.speed.SPEED.valid_segmentation_plans", "modulename": "src.SPEED.speed", "qualname": "SPEED.valid_segmentation_plans", "kind": "function", "doc": "<p>Check the valid segmentation plan based on the zone data</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>plans</strong>:  The valid VNF Segmentations</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plans</span><span class=\"p\">:</span> <span class=\"n\">Dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.speed.SPEED.delay_to_all_gws", "modulename": "src.SPEED.speed", "qualname": "SPEED.delay_to_all_gws", "kind": "function", "doc": "<p>Return the delay from a node to all the GWs of the environment.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong>:  The node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict with the name of the GW as key, and the delay as value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">SimPlacement</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.speed.SPEED.select_segmentation_plan", "modulename": "src.SPEED.speed", "qualname": "SPEED.select_segmentation_plan", "kind": "function", "doc": "<p>Select the best segmentation plan to be processed.</p>\n\n<p>We select the plan with few VNF Segments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>segmentation_plan</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">segmentation_plan</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.speed.SPEED.compute_child_zone_vnf_segment_execution_cost", "modulename": "src.SPEED.speed", "qualname": "SPEED.compute_child_zone_vnf_segment_execution_cost", "kind": "function", "doc": "<p>Compute the cost for execute the segment in a child zone. The cost is computed based on the aggregated data\nstored in the parent zone.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>vnf_segment</strong>:  VNFs in the segment</li>\n<li><strong>zone_name</strong>:  Name of the child zone</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vnf_segment</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">zone_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.SPEED.types", "modulename": "src.SPEED.types", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.SPEED.types.InfrastructureData", "modulename": "src.SPEED.types", "qualname": "InfrastructureData", "kind": "class", "doc": "<p>The data about the nodes in compute zones.</p>\n", "bases": "builtins.dict"}, {"fullname": "src.SPEED.types.AggregatedData", "modulename": "src.SPEED.types", "qualname": "AggregatedData", "kind": "class", "doc": "<p>The data aggregated in aggregation zones.</p>\n", "bases": "builtins.dict"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();